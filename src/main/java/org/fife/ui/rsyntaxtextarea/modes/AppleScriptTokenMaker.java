/* The following code was generated by JFlex 1.4.1 on 13/02/15 12:12 PM */

/*
 * 02/15/2015
 *
 * AppleScriptTokenMaker.java - Scanner for Visual Basic
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for AppleScript.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated AppleScriptTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * TODO: Version/Author?
 */

public class AppleScriptTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\25\0\1\33\1\56\1\7\1\11\1\57\1\56"+
    "\1\54\1\40\1\12\1\14\1\13\1\15\1\56\1\10\1\17\1\52"+
    "\1\2\11\2\1\30\1\56\1\42\1\31\1\42\1\47\1\56\1\24"+
    "\1\3\1\45\1\41\1\16\1\23\1\43\1\44\1\32\1\1\1\61"+
    "\1\25\1\46\1\37\1\35\1\60\1\34\1\21\1\26\1\20\1\22"+
    "\1\53\1\50\1\62\1\51\1\1\1\56\1\0\1\56\1\36\1\4"+
    "\1\0\1\24\1\3\1\45\1\41\1\16\1\63\1\43\1\64\1\32"+
    "\1\1\1\61\1\25\1\46\1\37\1\35\1\60\1\34\1\21\1\26"+
    "\1\20\1\22\1\53\1\65\1\62\1\51\1\1\1\27\1\55\1\27"+
    "\1\56\54\0\1\0\1\0\16\0\1\0\73\0\1\36\u2168\0\1\36"+
    "\3\0\1\36\1\36\u0da4\0\1\0\1\0\ucff4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\1\2\6\11\1\1\10\4\1\1\6\6\1"+
    "\1\11\1\12\7\11\1\13\7\11\2\0\3\1\1\14"+
    "\1\15\1\2\1\16\7\1\1\17\16\1\1\14\1\0"+
    "\13\1\3\14\2\1\1\14\13\1\1\0\1\1\4\11"+
    "\4\0\1\20\4\11\5\0\13\1\1\14\6\1\1\14"+
    "\3\1\1\14\10\1\1\0\11\1\1\0\22\1\4\11"+
    "\4\0\4\11\4\0\1\17\10\1\1\0\1\1\1\21"+
    "\5\1\1\0\2\1\1\0\5\1\7\0\2\1\1\0"+
    "\1\14\5\1\2\14\3\11\1\22\2\0\3\11\1\23"+
    "\2\0\1\1\1\14\1\0\5\1\1\0\1\1\1\6"+
    "\1\0\1\1\5\0\1\6\2\1\2\0\7\1\1\11"+
    "\2\0\1\11\3\0\1\1\1\24\1\1\5\0\1\6"+
    "\3\0\2\1\1\14\2\0\4\1\1\0\1\1\1\0"+
    "\2\1\12\0\1\1\3\0\2\1\3\0\1\6\7\0"+
    "\1\1\1\14\2\0\1\6\47\0\1\6\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\242"+
    "\0\u017a\0\u01b0\0\u01e6\0\242\0\u021c\0\242\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\242\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\242\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\242\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u02be\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\330\0\242\0\u0252\0\242\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u0654\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\242\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\242\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66"+
    "\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\330\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u1d52\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a"+
    "\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a"+
    "\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca"+
    "\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u1bd8\0\u3744"+
    "\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4"+
    "\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u32d6\0\u3b10\0\u3b46\0\u341a\0\u3b7c\0\u3bb2\0\u3be8"+
    "\0\u38be\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\242\0\u3ea6\0\u3edc"+
    "\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c"+
    "\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c"+
    "\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec"+
    "\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c"+
    "\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c"+
    "\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc"+
    "\0\u4932\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac"+
    "\0\u4ae2\0\u4b18\0\u44fa\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26"+
    "\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6"+
    "\0\u4e0c\0\u4e42\0\u4e78\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86"+
    "\0\u4fbc\0\u4ff2\0\u5028\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136"+
    "\0\u516c\0\u51a2\0\u51d8\0\u520e\0\u5244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\4\1\16\1\32\1\11\1\5\1\33\1\16\1\34"+
    "\1\4\1\35\1\36\1\37\1\5\1\40\1\41\1\4"+
    "\1\42\1\5\1\16\1\5\1\16\1\43\2\4\1\44"+
    "\2\5\1\25\1\5\1\42\5\45\1\46\15\45\1\47"+
    "\20\45\1\50\3\45\1\51\12\45\1\52\1\53\1\54"+
    "\5\55\1\56\5\55\1\57\7\55\1\60\20\55\1\61"+
    "\3\55\1\62\12\55\1\63\1\64\1\65\67\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\2\0\1\6\13\0\1\66"+
    "\1\67\47\0\4\5\11\0\1\70\1\0\2\5\1\71"+
    "\1\5\1\72\2\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\1\5\1\73"+
    "\1\0\1\5\4\0\6\5\6\0\1\11\24\0\1\11"+
    "\32\0\7\12\1\74\56\12\2\0\1\75\5\0\1\14"+
    "\70\0\1\76\54\0\1\75\64\0\4\5\11\0\1\5"+
    "\1\0\1\5\1\77\3\5\1\100\1\5\3\0\1\101"+
    "\1\0\1\102\1\5\1\0\1\103\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\104\4\0\2\5\1\105"+
    "\3\5\2\0\1\106\64\0\4\5\11\0\1\107\1\0"+
    "\1\5\1\110\5\5\3\0\1\111\1\0\1\5\1\73"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\112\2\5"+
    "\1\0\2\5\1\0\1\5\4\0\4\5\1\112\1\5"+
    "\1\0\4\5\11\0\1\113\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\6\5\1\114\3\0\1\5\1\0"+
    "\2\5\1\0\1\115\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\5\1\116\2\5\1\117\2\5\3\0"+
    "\1\120\1\0\1\5\1\121\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\2\5\1\122\1\5\11\0\1\5\1\0\1\73"+
    "\1\123\1\5\1\124\2\5\1\125\3\0\1\5\1\126"+
    "\2\5\1\0\1\127\1\0\1\5\1\0\1\130\3\5"+
    "\1\0\2\5\1\0\1\5\4\0\1\131\2\5\1\124"+
    "\2\5\1\0\4\5\11\0\1\132\1\0\4\5\1\133"+
    "\2\5\3\0\1\5\1\0\1\5\1\134\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\135\1\0\1\136"+
    "\6\5\3\0\1\137\1\0\1\5\1\140\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\141\1\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\1\142\2\5\1\73\2\5\1\143\3\0\1\5"+
    "\1\0\2\5\1\0\1\144\1\0\1\5\1\0\1\145"+
    "\3\5\1\0\2\5\1\0\1\5\4\0\3\5\1\73"+
    "\2\5\1\0\4\5\11\0\1\5\1\0\1\5\1\73"+
    "\1\146\1\73\3\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\147\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\150\4\0\3\5\1\73\2\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\151\1\0\1\5\1\71"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\152\1\0\1\5\1\153\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\31\0\1\16\35\0\4\5\11\0"+
    "\1\71\1\0\1\5\1\154\3\5\1\155\1\5\3\0"+
    "\1\156\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\1\5\1\157\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\73\1\0\7\5\3\0\1\160\1\0\1\5"+
    "\1\127\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\1\5\1\73\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\161\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\162\2\5"+
    "\1\0\2\5\1\0\1\5\4\0\4\5\1\162\1\5"+
    "\55\163\1\4\10\163\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\164\1\71\4\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\5\45\1\0\55\45\3\0"+
    "\5\45\1\0\12\45\1\165\11\45\1\166\30\45\3\0"+
    "\5\45\1\0\12\45\1\167\42\45\3\0\5\45\1\0"+
    "\42\45\1\170\12\45\2\0\1\171\20\0\1\172\11\0"+
    "\1\173\53\0\1\174\115\0\1\171\14\0\1\171\5\55"+
    "\1\0\5\55\1\0\47\55\17\0\1\175\51\0\5\55"+
    "\1\0\5\55\1\0\4\55\1\176\11\55\1\177\30\55"+
    "\3\0\5\55\1\0\5\55\1\0\4\55\1\200\42\55"+
    "\3\0\5\55\1\0\5\55\1\0\34\55\1\201\12\55"+
    "\2\0\1\202\20\0\1\203\11\0\1\204\53\0\1\205"+
    "\115\0\1\202\14\0\1\202\10\0\1\206\4\0\1\206"+
    "\51\0\4\5\11\0\1\5\1\0\1\207\2\5\1\210"+
    "\1\5\1\211\1\212\3\0\1\5\1\0\2\5\1\0"+
    "\1\213\1\0\1\5\1\0\1\214\1\215\2\5\1\0"+
    "\2\5\1\0\1\5\4\0\3\5\1\210\1\215\1\5"+
    "\1\0\4\5\11\0\1\5\1\0\1\73\6\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\2\5\1\216"+
    "\1\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\1\5\1\217\5\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\6\5\1\114\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\220\3\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\2\5\1\221\4\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\222\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\223\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\71\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\2\0"+
    "\1\106\13\0\1\66\50\0\4\5\11\0\1\5\1\0"+
    "\5\5\1\224\1\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\225\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\2\5\1\226\1\5\1\227\2\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\1\5\1\73\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\230\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\231\1\0\1\5\1\232\2\5\1\71\2\5\3\0"+
    "\1\233\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\1\234\2\5\1\235\3\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\1\236"+
    "\2\5\1\235\2\5\1\0\4\5\11\0\1\73\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\1\237\6\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\1\5\1\240\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\5\5\1\241\1\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\1\5\1\133\1\5\1\225"+
    "\3\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\3\5\1\225\2\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\73\1\242\4\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\1\5\1\243\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\1\5\1\244\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\1\150"+
    "\6\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\245\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\21\0"+
    "\1\246\45\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\73\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\4\5\1\247\2\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\4\5\1\250\2\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\6\5\1\251\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\6\5\1\71\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\252\1\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\73\6\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\253\1\5"+
    "\1\0\2\5\1\0\1\254\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\4\5\1\255\2\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\256\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\225\3\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\114\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\5\1\257\5\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\6\5\1\73\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\260\2\5\1\0\1\261"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\1\262"+
    "\5\5\1\263\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\264\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\1\265\6\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\1\262\6\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\266\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\2\5\1\0\1\225"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\73\4\0\6\5"+
    "\1\0\4\5\11\0\1\267\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\270\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\1\5\1\271\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\272\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\273\1\0\1\5\1\0"+
    "\3\5\1\274\1\0\2\5\1\0\1\5\4\0\1\275"+
    "\5\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\276\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\1\277\6\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\300\1\0\7\5\3\0\1\301\1\0\1\5"+
    "\1\100\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\1\5\1\302"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\5\45\1\0\52\45\1\303"+
    "\2\45\3\0\5\45\1\0\17\45\1\304\35\45\3\0"+
    "\5\45\1\0\12\45\1\305\42\45\3\0\5\45\1\0"+
    "\42\45\1\306\12\45\2\0\1\307\50\0\1\307\14\0"+
    "\1\307\60\0\1\310\32\0\1\311\60\0\1\312\45\0"+
    "\5\55\1\0\5\55\1\0\44\55\1\313\2\55\3\0"+
    "\5\55\1\0\5\55\1\0\11\55\1\314\35\55\3\0"+
    "\5\55\1\0\5\55\1\0\4\55\1\315\42\55\3\0"+
    "\5\55\1\0\5\55\1\0\34\55\1\316\12\55\2\0"+
    "\1\317\50\0\1\317\14\0\1\317\60\0\1\320\32\0"+
    "\1\321\60\0\1\322\47\0\1\323\64\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\1\324\1\5"+
    "\1\0\1\5\4\0\5\5\1\324\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\1\5\1\300"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\1\5\1\325\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\326\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\327\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\330\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\331\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\1\5\1\73\4\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\1\5\1\266\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\225\2\5\1\0\2\5\1\0\1\5"+
    "\4\0\4\5\1\225\1\5\1\0\4\5\11\0\1\5"+
    "\1\0\4\5\1\332\2\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\6\5\1\333\3\0\1\5\1\334\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\275\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\5\5\1\73\1\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\335\6\5\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\336\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\337\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\340\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\2\5\1\0\1\73"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\2\5"+
    "\1\73\4\5\3\0\1\5\1\0\1\5\1\341\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\127\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\2\5\1\342\4\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\343\1\0"+
    "\7\5\3\0\1\5\1\344\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\345\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\224\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\71\1\0\1\5\1\0\3\5\1\73\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\6\5\1\226\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\225\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\2\5\1\71\4\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\114\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\2\5\1\331\4\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\346\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\16\0\1\347\50\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\350\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\1\5\1\351"+
    "\5\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\6\5\1\352"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\4\5\1\224\2\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\1\5\1\331\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\151\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\5\1\353\5\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\114\1\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\354\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\16\0\1\355\6\0\1\356\4\0"+
    "\1\357\4\0\1\360\3\0\1\361\1\0\1\362\21\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\363\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\1\5\1\73"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\1\364\6\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\1\5\1\365\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\366\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\1\5\1\73\5\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\6\5\1\367\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\4\5\1\370\2\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\2\5\1\252\1\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\371\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\372\5\5\1\373\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\374\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\1\5\1\73\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\301"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\375\2\5\1\0\2\5\1\0\1\5\4\0\4\5"+
    "\1\375\1\5\1\0\4\5\11\0\1\5\1\0\1\5"+
    "\1\114\5\5\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\5\5"+
    "\1\114\1\5\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\1\376"+
    "\5\5\5\45\1\0\22\45\1\377\32\45\3\0\5\45"+
    "\1\0\10\45\1\303\44\45\3\0\5\45\1\0\52\45"+
    "\1\u0100\2\45\3\0\5\45\1\0\11\45\1\u0101\43\45"+
    "\22\0\1\u0102\76\0\1\u0103\53\0\1\310\127\0\1\u0104"+
    "\5\0\5\55\1\0\5\55\1\0\14\55\1\u0105\32\55"+
    "\3\0\5\55\1\0\5\55\1\0\2\55\1\313\44\55"+
    "\3\0\5\55\1\0\5\55\1\0\44\55\1\u0106\2\55"+
    "\3\0\5\55\1\0\5\55\1\0\3\55\1\u0107\43\55"+
    "\22\0\1\u0108\76\0\1\u0109\53\0\1\320\127\0\1\u010a"+
    "\6\0\4\5\11\0\1\272\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\1\73"+
    "\1\5\1\0\1\5\4\0\5\5\1\73\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\114\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\4\5\1\225\2\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\2\5\1\0\1\u010b"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\127\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\5\5\1\u010c\1\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\334\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\50\0\1\u010d"+
    "\14\0\1\u010d\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\73\2\5\1\0\2\5\1\0\1\5"+
    "\4\0\4\5\1\73\1\5\1\0\4\5\11\0\1\5"+
    "\1\0\6\5\1\u010e\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\6\5\1\73\3\0\1\5\1\0\1\5\1\u010f\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\2\5\1\u0110\4\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\u0111\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\u0112\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\20\0\1\u0113\46\0\4\5\11\0"+
    "\1\5\1\0\4\5\1\71\2\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\u0114\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\23\0\1\u0115\37\0\1\u0115\3\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\133\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\1\u0114\6\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\u0116\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\1\u0117"+
    "\6\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\1\71\5\5"+
    "\34\0\1\u0118\47\0\1\u0119\106\0\1\16\63\0\1\u011a"+
    "\51\0\1\u011b\101\0\1\u011c\50\0\1\u011d\46\0\4\5"+
    "\11\0\1\u011e\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\1\5\1\u011f\5\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\35\0\1\u0120\31\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\u0121\2\5"+
    "\1\0\1\u0122\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\1\u0123\6\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\4\5\1\u0124\2\5\3\0\1\u0125\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\u0126\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\6\5\1\u0127"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\1\5\1\u010f\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\u0128\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\5\45\1\0\44\45"+
    "\1\u0129\10\45\3\0\5\45\1\0\20\45\1\303\1\45"+
    "\1\377\32\45\3\0\1\45\4\u0101\1\0\2\45\17\u0101"+
    "\1\45\3\u0101\1\45\2\u0101\1\45\3\u0101\1\45\12\u0101"+
    "\1\45\5\u0101\3\u0102\1\0\3\u0102\1\u012a\3\0\6\u012a"+
    "\1\u0102\1\u012a\7\u0102\1\0\2\u012a\1\u0102\1\0\2\u0102"+
    "\1\0\1\u0102\1\u012a\1\u0102\1\0\4\u0102\1\u012a\4\u0102"+
    "\1\u012a\1\0\1\u012a\7\u0102\52\0\1\u012b\41\0\1\310"+
    "\1\0\1\u0103\35\0\5\55\1\0\5\55\1\0\36\55"+
    "\1\u012c\10\55\3\0\5\55\1\0\5\55\1\0\12\55"+
    "\1\313\1\55\1\u0105\32\55\3\0\1\55\4\u0107\1\0"+
    "\2\55\3\u0107\1\u012d\13\u0107\1\55\3\u0107\1\55\2\u0107"+
    "\1\55\3\u0107\1\55\12\u0107\1\55\5\u0107\3\u0108\1\0"+
    "\3\u0108\1\u012d\3\0\6\u012d\1\u0108\1\u012d\7\u0108\1\0"+
    "\2\u012d\1\u0108\1\0\2\u0108\1\0\1\u0108\1\u012d\1\u0108"+
    "\1\0\4\u0108\1\u012d\4\u0108\1\u012d\1\0\1\u012d\7\u0108"+
    "\52\0\1\u012e\41\0\1\320\1\0\1\u0109\36\0\4\5"+
    "\11\0\1\5\1\0\6\5\1\333\3\0\1\5\1\334"+
    "\2\5\1\0\1\u011f\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\6\5\1\73\3\0\1\5\1\344\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\32\0\1\u012f\34\0\4\5"+
    "\11\0\1\5\1\0\4\5\1\u0130\2\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\2\5\1\71\4\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\335\3\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\u0131\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\u0132\1\0"+
    "\7\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\35\0\1\16\31\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\5\1\u0133\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\16\0\1\u0134\14\0\1\344\52\0\1\u0135\67\0"+
    "\1\u0136\71\0\1\u0137\57\0\1\u0138\63\0\1\u0139\106\0"+
    "\1\u013a\61\0\1\u013b\33\0\4\5\11\0\1\5\1\0"+
    "\4\5\1\u013c\2\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\u013d\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\23\0\1\u013e\37\0\1\u013e\41\0\1\u013f\27\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\u0140\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\u0141\1\0\7\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\7\5\3\0\1\u0142\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\5\1\0\2\5\1\0\1\u0143\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\u0144\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\1\0\4\5\11\0"+
    "\1\5\1\0\7\5\3\0\1\5\1\u0145\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\1\0\4\5\11\0\1\5\1\0"+
    "\1\5\1\u0146\5\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\2\5\1\0"+
    "\1\5\4\0\6\5\5\45\1\0\44\45\1\u0101\10\45"+
    "\55\0\1\u0102\13\0\5\55\1\0\5\55\1\0\36\55"+
    "\1\u0107\10\55\55\0\1\u0108\33\0\1\u0147\46\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\u0148\1\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\u0149\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\23\0\1\u014a\37\0\1\u014a"+
    "\23\0\1\u014b\110\0\1\u014c\17\0\1\u014c\25\0\1\u014d"+
    "\67\0\1\u014e\72\0\1\u014f\56\0\1\u0150\61\0\1\u0151"+
    "\63\0\1\355\1\0\1\u0113\4\0\1\u0152\15\0\1\u0153"+
    "\1\0\1\362\21\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\265"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\u0154\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\35\0\1\u0140"+
    "\50\0\1\u0155\46\0\4\5\11\0\1\5\1\0\1\5"+
    "\1\352\5\5\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\4\0\6\5\1\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\142\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\5\1\0\2\5\1\114\4\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\2\5\1\0\1\5\4\0\6\5"+
    "\1\0\4\5\11\0\1\365\1\0\7\5\3\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\3\0\1\u0156"+
    "\20\0\1\u0157\42\0\4\5\11\0\1\5\1\0\1\275"+
    "\6\5\3\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\44\0\1\16\17\0\1\16\2\0\4\5\11\0"+
    "\1\5\1\0\1\u0158\6\5\3\0\1\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\1\0\4\5\11\0\1\5"+
    "\1\0\7\5\3\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\u0159\1\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\21\0\1\u015a\62\0\1\u015b"+
    "\73\0\1\u015c\66\0\1\u015d\73\0\1\u0116\50\0\1\355"+
    "\1\0\1\u0113\4\0\1\u0152\4\0\1\357\10\0\1\u0153"+
    "\1\0\1\362\40\0\1\u015e\71\0\1\u015f\57\0\1\u0160"+
    "\70\0\1\u0161\45\0\4\5\11\0\1\5\1\0\7\5"+
    "\3\0\1\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\73\3\5\1\0\2\5\1\0\1\5\4\0"+
    "\6\5\33\0\1\u0162\50\0\1\u0163\72\0\1\u0164\37\0"+
    "\1\u0164\3\0\4\5\11\0\1\5\1\0\7\5\3\0"+
    "\1\u0165\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\2\5\1\0\1\5\4\0\6\5\1\0"+
    "\4\5\11\0\1\u0166\1\0\7\5\3\0\1\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\1\0\1\5\4\0\6\5\35\0\1\u0167\67\0"+
    "\1\u0168\65\0\1\u0169\61\0\1\344\50\0\1\u016a\101\0"+
    "\1\u016b\61\0\1\u016c\55\0\1\u016d\65\0\1\u016e\26\0"+
    "\1\u016f\43\0\1\u0170\37\0\1\u0170\22\0\1\u0171\46\0"+
    "\4\5\11\0\1\5\1\0\7\5\3\0\1\5\1\0"+
    "\1\5\1\371\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\2\5\1\0\1\5\4\0\6\5\1\0\4\5"+
    "\11\0\1\5\1\0\7\5\3\0\1\5\1\344\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\1\5\4\0\6\5\46\0\1\u013e\64\0\1\u0172"+
    "\53\0\1\u0173\53\0\1\u014e\103\0\1\u0174\54\0\1\u0175"+
    "\63\0\1\u0176\75\0\1\u0177\66\0\1\u0178\65\0\1\u0179"+
    "\46\0\1\u017a\65\0\1\u017b\104\0\1\u017c\46\0\1\u017d"+
    "\102\0\1\u017e\52\0\1\u017f\67\0\1\u0180\102\0\1\u0181"+
    "\6\0\1\u0182\40\0\1\u0183\65\0\1\16\65\0\1\u0184"+
    "\105\0\1\u0185\44\0\1\u0186\63\0\1\u0187\73\0\1\u0188"+
    "\61\0\1\u0189\63\0\1\u018a\65\0\1\16\102\0\1\u018b"+
    "\65\0\1\u018c\76\0\1\u018d\17\0\1\u018d\22\0\1\u0175"+
    "\71\0\1\16\64\0\1\u018e\74\0\1\u0145\50\0\1\355"+
    "\52\0\1\u018f\106\0\1\u0190\73\0\1\357\104\0\1\16"+
    "\53\0\1\u0191\61\0\1\u0192\67\0\1\u0193\51\0\1\u0194"+
    "\77\0\1\u0195\50\0\1\u0196\103\0\1\u0197\53\0\1\u0198"+
    "\67\0\1\u0199\66\0\1\u019a\73\0\1\u019b\52\0\1\u019c"+
    "\102\0\1\u019d\77\0\1\16\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21114];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\3\1\1\11\1\1\1\11"+
    "\12\1\1\11\14\1\1\11\7\1\1\11\7\1\2\0"+
    "\4\1\1\11\1\1\1\11\27\1\1\0\34\1\1\0"+
    "\5\1\4\0\1\11\4\1\5\0\37\1\1\0\11\1"+
    "\1\0\26\1\4\0\4\1\4\0\1\11\10\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\7\0\2\1\1\0"+
    "\14\1\2\0\4\1\2\0\2\1\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\5\0\3\1\2\0\10\1\2\0"+
    "\1\1\3\0\3\1\5\0\1\1\3\0\2\1\1\11"+
    "\2\0\4\1\1\0\1\1\1\0\2\1\12\0\1\1"+
    "\3\0\2\1\3\0\1\1\7\0\2\1\2\0\1\1"+
    "\47\0\1\1\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AppleScriptTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "'", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = BLOCK_COMMENT;
				start = text.offset;
				break;
			default:
				state = YYINITIAL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AppleScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AppleScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }



  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 22: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 23: break;
        case 10: 
          { addToken(start, zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 24: break;
        case 12: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start, zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 27: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 11: 
          { addToken(start, zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 29: break;
        case 7: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 30: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 18: 
          { int temp=zzStartRead; addToken(start, zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp, zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 32: break;
        case 17: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 33: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 34: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(BLOCK_COMMENT);
          }
        case 35: break;
        case 20: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 19: 
          { int temp=zzStartRead; addToken(start, zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp, zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 39: break;
        case 9: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start, zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 414: break;
            case BLOCK_COMMENT: {
              addToken(start, zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 415: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 416: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
